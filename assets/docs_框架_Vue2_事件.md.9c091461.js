import{_ as l,o as a,c as s,U as e}from"./chunks/framework.83a19234.js";const h=JSON.parse('{"title":"Vue 事件","description":"","frontmatter":{},"headers":[],"relativePath":"docs/框架/Vue2/事件.md","filePath":"docs/框架/Vue2/事件.md","lastUpdated":1701307205000}'),n={name:"docs/框架/Vue2/事件.md"},t=e(`<h1 id="vue-事件" tabindex="-1">Vue 事件 <a class="header-anchor" href="#vue-事件" aria-label="Permalink to &quot;Vue 事件&quot;">​</a></h1><p>内联语句处理器</p><p>@事件=&#39;方法($event)&#39; // $event 将当前事件原生 event 传入</p><h2 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h2><ul><li>.self： 只触发自己的方法，子节点冒泡不触发</li><li>.stop： 阻止冒泡</li><li>.prevent： 阻止默认行为</li><li>.passive： 不阻止默认行为,不能与prevent一起使用</li><li>.once： 只执行一次</li><li>.capture： 使用事件捕捉模式 <ul><li>@click.prevent.self 会阻止所有的点击</li><li>@click.self.prevent 只会阻止对元素自身的点击</li></ul></li><li>.native： 原生事件</li></ul><h2 id="按键修饰符" tabindex="-1">按键修饰符 <a class="header-anchor" href="#按键修饰符" aria-label="Permalink to &quot;按键修饰符&quot;">​</a></h2><ul><li>.ascii码值：按下对应的键值触发</li><li>.enter：回车</li><li>.tab：table</li><li>.delete：“删除”和“退格”键</li><li>.esc：退出</li><li>.space：空格</li><li>.up：上</li><li>.down：下</li><li>.left：左</li><li>.right：右</li></ul><p>自定义按键修饰符别名</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">keyCodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">f1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">112</span></span></code></pre></div><p>使用 ---&gt; @keyup.f1</p><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta：windows/mac 的 command 键</li></ul><p>多个按键</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">keyup</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alt</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">67</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// ctrl+c</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">keyup</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ctrl  </span><span style="color:#676E95;font-style:italic;">// Ctrl + 点击</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果同时加了其他的按键按下也会触发</span></span></code></pre></div><ul><li>.exact精确的修饰符按下事件</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ctrl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exact </span><span style="color:#676E95;font-style:italic;">// 只按下 ctrl 才能触发,多余按下不能触发</span></span>
<span class="line"><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exact    </span><span style="color:#676E95;font-style:italic;">// 不按下任何键才能触发</span></span></code></pre></div><h2 id="鼠标修饰符" tabindex="-1">鼠标修饰符 <a class="header-anchor" href="#鼠标修饰符" aria-label="Permalink to &quot;鼠标修饰符&quot;">​</a></h2><ul><li>.left</li><li>.right</li><li>.middle</li></ul><h2 id="表单修饰符" tabindex="-1">表单修饰符 <a class="header-anchor" href="#表单修饰符" aria-label="Permalink to &quot;表单修饰符&quot;">​</a></h2><ul><li>.lazy：value 改变且失焦才触发，在 change 事件中同步</li><li>.number：将输入的值转为 number 类型</li><li>.trim：过滤输入的首位空格</li></ul>`,19),o=[t];function i(p,c,r,d,u,y){return a(),s("div",null,o)}const D=l(n,[["render",i]]);export{h as __pageData,D as default};
