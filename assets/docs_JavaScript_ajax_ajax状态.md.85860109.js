import{_ as s,o as a,c as l,U as n}from"./chunks/framework.83a19234.js";const C=JSON.parse('{"title":"JavaScript ajax 状态码、json 对象、http 状态码","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/ajax/ajax状态.md","filePath":"docs/JavaScript/ajax/ajax状态.md","lastUpdated":1701309138000}'),o={name:"docs/JavaScript/ajax/ajax状态.md"},p=n(`<h1 id="javascript-ajax-状态码、json-对象、http-状态码" tabindex="-1">JavaScript ajax 状态码、json 对象、http 状态码 <a class="header-anchor" href="#javascript-ajax-状态码、json-对象、http-状态码" aria-label="Permalink to &quot;JavaScript ajax 状态码、json 对象、http 状态码&quot;">​</a></h1><h2 id="readystate" tabindex="-1">readyState <a class="header-anchor" href="#readystate" aria-label="Permalink to &quot;readyState&quot;">​</a></h2><ul><li>open：之前是 0</li><li>send：发送请求之后是 1</li><li>send：方法完成，已经接受到所有的响应内容 2</li><li>正在解析下载到的数据 3</li><li>解析完成 4</li></ul><h2 id="state-http-常见状态码" tabindex="-1">State HTTP 常见状态码 <a class="header-anchor" href="#state-http-常见状态码" aria-label="Permalink to &quot;State HTTP 常见状态码&quot;">​</a></h2><ul><li>200：交易成功</li><li>301：永久重定向</li><li>302：临时重定向</li><li>304：使用缓存文件</li><li>400：错误请求，如语法错误</li><li>404：没有发现文件、查询或 URl</li><li>405：请求方式错误</li><li>500：后端错误</li><li>1**：请求收到，继续处理</li><li>2**：操作成功收到，分析、接受</li><li>3**：完成此请求必须进一步处理</li><li>4**：请求包含一个错误语法或不能完成</li><li>5**：服务器执行一个完全有效请求失败</li></ul><h2 id="json-对象" tabindex="-1">json 对象 <a class="header-anchor" href="#json-对象" aria-label="Permalink to &quot;json 对象&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">()   </span><span style="color:#676E95;font-style:italic;">// josn字符串转为数据结构</span></span>
<span class="line"><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 数据结构转为字符串</span></span>
<span class="line"><span style="color:#82AAFF;">eval</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">// 将具有 js 格式的字符串转换为 js 执行，可以转换除了 json 以外的任意 js 字符串</span></span></code></pre></div><h3 id="数组深拷贝" tabindex="-1">数组深拷贝 <a class="header-anchor" href="#数组深拷贝" aria-label="Permalink to &quot;数组深拷贝&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rypy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rypy1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {name: &quot;rypy&quot;, age: 20}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj1)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {name: &quot;rypy1&quot;, age: 20}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">php 实现</span></span>
<span class="line"><span style="color:#A6ACCD;">echo </span><span style="color:#82AAFF;">json_decode</span><span style="color:#A6ACCD;">($arr)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// josn字符串 =&gt; 数据结构</span></span>
<span class="line"><span style="color:#A6ACCD;">echo </span><span style="color:#82AAFF;">json_encode</span><span style="color:#A6ACCD;">($arr)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 数据结构  =&gt; 字符串</span></span></code></pre></div>`,9),t=[p];function e(c,r,i,y,D,A){return a(),l("div",null,t)}const d=s(o,[["render",e]]);export{C as __pageData,d as default};
