import{_ as a,o as l,c as i,U as e}from"./chunks/framework.83a19234.js";const m=JSON.parse('{"title":"JavaScript audio 音频 API","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/多媒体API/audio.md","filePath":"docs/JavaScript/多媒体API/audio.md","lastUpdated":1701309138000}'),t={name:"docs/JavaScript/多媒体API/audio.md"},o=e('<h1 id="javascript-audio-音频-api" tabindex="-1">JavaScript audio 音频 API <a class="header-anchor" href="#javascript-audio-音频-api" aria-label="Permalink to &quot;JavaScript audio 音频 API&quot;">​</a></h1><h2 id="标签相关属性" tabindex="-1">标签相关属性 <a class="header-anchor" href="#标签相关属性" aria-label="Permalink to &quot;标签相关属性&quot;">​</a></h2><ul><li>src：要播放的音频/视频的 URL</li><li>controls：显示音频/视频播放控件</li><li>loop：音频/视频结束后重新播放</li><li>muted：音频/视频静音</li></ul><h2 id="只读属性" tabindex="-1">只读属性 <a class="header-anchor" href="#只读属性" aria-label="Permalink to &quot;只读属性&quot;">​</a></h2><ul><li>duration：文件的播放时长，单位 s，无法获取则 NaN，当触发 canplay 事件后可以获取</li><li>paused：是否暂停，返回 true/false</li><li>ended：是否播放完毕 true/false</li><li>error：发现错误后返回错误代码</li><li>currentSrc：返回字符串形式正在播放或已加载文件，对应浏览器 source 元素中选择的文件</li><li>buffered：获取当前缓冲区大小，返回 TimeRanges 对象</li></ul><h2 id="可控制属性" tabindex="-1">可控制属性 <a class="header-anchor" href="#可控制属性" aria-label="Permalink to &quot;可控制属性&quot;">​</a></h2><ul><li>src：指定音频文件位置</li><li>autoplay：是否自动播放</li><li>preload：是否预加载</li><li>loop：是否循环播放</li><li>controls：显示/隐藏用户控制界面</li><li>muted：设置是否静音</li><li>volume：当前音量值，0-1 之间</li><li>currentTime：返回/设置当前播放的时间，单位 s</li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><ul><li>load()：加载视频、音频软件</li><li>play()：播放</li><li>pause()：暂停</li><li>canPlayType(obj)：测试播放后指定的 Mime 类型文件</li></ul><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><ul><li>loadstart：客户端开始请求数据</li><li>progress：正在播放的时候不停触发，暂停不会触发，触发事件间隔较大</li><li>play：play() 和 autoplay 时触发，类似 onplaying</li><li>pause：pause() 方法时触发</li><li>ended：结束播放时触发</li><li>timeupdate：播放时间发生改变时触发，暂停不触发，触发事件间隔较小</li><li>canplaythrough：歌曲载入完成</li><li>canplay：缓存至可播放状态，类似事件 onloadedmetadata</li><li>onloadedmetadata：当元数据（如分辨率和时长）被加载时触发</li></ul>',11),r=[o];function d(s,c,u,n,p,h){return l(),i("div",null,r)}const f=a(t,[["render",d]]);export{m as __pageData,f as default};
