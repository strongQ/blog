import{_ as s,o as a,c as l,U as o}from"./chunks/framework.83a19234.js";const C=JSON.parse('{"title":"JavaScript ES6 Promise","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ES6/Promise.md","filePath":"docs/ES6/Promise.md","lastUpdated":1701307601000}'),n={name:"docs/ES6/Promise.md"},e=o(`<h1 id="javascript-es6-promise" tabindex="-1">JavaScript ES6 Promise <a class="header-anchor" href="#javascript-es6-promise" aria-label="Permalink to &quot;JavaScript ES6 Promise&quot;">​</a></h1><h2 id="promise-状态" tabindex="-1">Promise 状态 <a class="header-anchor" href="#promise-状态" aria-label="Permalink to &quot;Promise 状态&quot;">​</a></h2><p>Promise 状态</p><ul><li>pending（进行中） ----&gt; fulfilled/resolved（成功）</li><li>pending（进行中） ----&gt; rejected（失败）</li></ul><p>只要处于 fulfilled/resolved [成功] 和 rejected [失败]，状态就不会再变。</p><ol><li>创建 Promise 参数内的函数会立即执行，并返回 Promise 对象</li><li>两个参数代表状态，resolve 成功调用，reject 失败调用</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">成功</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">失败</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="3"><li>返回 Pormise 对象调用 then 方法，第一个参数对象 resolve 成功后的回调，第二个参数对应 reject 失败时回调。then 方法也会返回 Promise 对象</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ol start="4"><li>then 方法执行成功的回调时，如果发生错误，不会被第二个参数对应 reject 失败时回调捕捉到。</li><li>then 方法执行成功的回调发生错误是，链式调用 catch 方法可以捕捉前面 then 方法发生的错误</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">代码块有发生错误</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="promise-all-与promise-race" tabindex="-1">Promise.all()与Promise.race() <a class="header-anchor" href="#promise-all-与promise-race" aria-label="Permalink to &quot;Promise.all()与Promise.race()&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">([</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 对象</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 对象</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// 批量执行</span></span></code></pre></div><ol><li>传入数组中包含多个 Promise 实例，也可以是别的值，all 包装成一个新的 Promise</li><li>全部都成功后，返回每个 Promise 成功的值 [&quot;resolve 成功值 1&quot;, &quot;resolve 成功值 1&quot;]</li><li>任何一个失败，返回第一个失败的 Promise 结果</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">race</span><span style="color:#A6ACCD;">([</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 对象</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 对象</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">])</span></span></code></pre></div><p>不管成功还是失败、哪个结果获得的快，就返回那个结果。</p>`,16),p=[e];function t(r,c,i,y,F,D){return a(),l("div",null,p)}const d=s(n,[["render",t]]);export{C as __pageData,d as default};
