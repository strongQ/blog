import{_ as s,o as a,c as n,U as l}from"./chunks/framework.83a19234.js";const F=JSON.parse('{"title":"JavaScript 数据类型检测","description":"","frontmatter":{},"headers":[],"relativePath":"docs/JavaScript/基本概念/数据类型检测.md","filePath":"docs/JavaScript/基本概念/数据类型检测.md","lastUpdated":1701334581000}'),o={name:"docs/JavaScript/基本概念/数据类型检测.md"},p=l(`<h1 id="javascript-数据类型检测" tabindex="-1">JavaScript 数据类型检测 <a class="header-anchor" href="#javascript-数据类型检测" aria-label="Permalink to &quot;JavaScript 数据类型检测&quot;">​</a></h1><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h2><ul><li><p>基本数据类型适用，引用数据类型会检测成 object</p></li><li><p>typeof 会返回字符串</p></li><li><p>&quot;undefined&quot;表示值未定义；</p></li><li><p>&quot;boolean&quot;表示值为布尔值；</p></li><li><p>&quot;string&quot;表示值为字符串；</p></li><li><p>&quot;number&quot;表示值为数值；</p></li><li><p>&quot;object&quot;表示值为对象（而不是函数）或null；</p></li><li><p>&quot;function&quot;表示值为函数；</p></li><li><p>&quot;symbol&quot;表示值为符号。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">String </span><span style="color:#89DDFF;">----&gt;</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"><span style="color:#A6ACCD;">Number </span><span style="color:#89DDFF;">----&gt;</span><span style="color:#A6ACCD;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">----&gt;</span><span style="color:#A6ACCD;"> number</span></span>
<span class="line"><span style="color:#A6ACCD;">Boolean </span><span style="color:#89DDFF;">----&gt;</span><span style="color:#A6ACCD;"> boolean</span></span>
<span class="line"><span style="color:#89DDFF;">undefined----&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-----&gt;</span><span style="color:#A6ACCD;"> object</span></span>
<span class="line"><span style="color:#A6ACCD;">Object </span><span style="color:#89DDFF;">-----&gt;</span><span style="color:#A6ACCD;"> object</span></span>
<span class="line"><span style="color:#A6ACCD;">Array  </span><span style="color:#89DDFF;">-----&gt;</span><span style="color:#A6ACCD;"> object</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;">-----&gt; </span><span style="color:#82AAFF;">function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">typeof</span><span style="color:#A6ACCD;"> 123 </span><span style="color:#676E95;font-style:italic;">// string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// typeof 是一个操作符而不是函数，所以不需要参数（但可以使用参数）。</span></span>
<span class="line"><span style="color:#82AAFF;">typeof</span><span style="color:#A6ACCD;"> &#39;</span><span style="color:#82AAFF;">message</span><span style="color:#A6ACCD;">&#39; </span><span style="color:#676E95;font-style:italic;">// &quot;string&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;string&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;object&quot; 这是因为特殊值null 被认为是一个对空对象的引用</span></span></code></pre></div><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h2><ul><li>根据原型链来识别返回 true 或 false</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">person </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 变量person是Object吗</span></span>
<span class="line"><span style="color:#A6ACCD;">person </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 变量person是Array吗</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 所有引用值都是属于 Object 下的实例，因此任何引用值都会返回 true</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">细节</p><p><code>typeof</code>在监测函数时会返回<code>function</code>。 但在<code>safari 5</code>之前和<code>chrome 7</code>之前监测正则表达式时，实现的细节不同，导致也会返回<code>function</code>，因为在这之前正则的内部实现了<code>[[call]]</code>方法。 因为<code>ECMA-262</code>规定内部实现了<code>[[call]]</code>方法的对象，<code>typeof</code>时都返回<code>function</code>。 在<code>IE</code>和<code>Firefox</code>中则会返回<code>Object</code>。</p></div><h2 id="判断是否是数组" tabindex="-1">判断是否是数组 <a class="header-anchor" href="#判断是否是数组" aria-label="Permalink to &quot;判断是否是数组&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Array </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;">(arr) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(arr) </span><span style="color:#676E95;font-style:italic;">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isPrototypeOf</span><span style="color:#A6ACCD;">(arr)</span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h2 id="object-tostring-判断" tabindex="-1">Object.toString 判断 <a class="header-anchor" href="#object-tostring-判断" aria-label="Permalink to &quot;Object.toString 判断&quot;">​</a></h2><ul><li>利用顶级对象 toString 方法改变 this 指向判断数据类型</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">([])</span><span style="color:#676E95;font-style:italic;">// [object Array]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">// [object Number]</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(Function)</span><span style="color:#676E95;font-style:italic;">// [object Function]</span></span></code></pre></div><h2 id="undefined-类型" tabindex="-1">Undefined 类型 <a class="header-anchor" href="#undefined-类型" aria-label="Permalink to &quot;Undefined 类型&quot;">​</a></h2><p>当使用var 或let 声明了变量但没有初始化时，就相当于给变量赋予了undefined 值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(message </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错，没有声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对未声明的变量，只能执行一个有用的操作，就是对它调用typeof</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;undefined&quot; 未声明</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 所以初始化的时候赋值，typeof 来检查某个变量是否未声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 未声明的变量调用 delete 也不会报错</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> a</span></span></code></pre></div><h2 id="null-类型" tabindex="-1">Null 类型 <a class="header-anchor" href="#null-类型" aria-label="Permalink to &quot;Null 类型&quot;">​</a></h2><p>null 值表示一个空对象指针，typeof null 会返回&quot;object&quot;</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;object&quot;</span></span></code></pre></div><p>使用 null 来初始化对象，只需要判断是不是null就可以知道是否被赋值引用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> car </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (car </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 一些操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>undefined 值是由null 值派生而来的，因此ECMA-262 将它们定义为表面上相等</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//（==）比较null 和undefined 始终返回true</span></span></code></pre></div>`,23),e=[p];function t(c,r,y,i,A,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
